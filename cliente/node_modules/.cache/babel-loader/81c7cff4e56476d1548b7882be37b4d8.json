{"ast":null,"code":"import { basePath, apiVersion } from \"./config\";\nimport { ACCESS_TOKEN, REFRESH_TOKEN } from \"../utils/constants\";\nimport jwtDecode from \"jwt-decode\";\nexport function getAccessToken() {\n  const accessToken = localStorage.getItem(ACCESS_TOKEN);\n\n  if (!accessToken || accessToken === \"null\") {\n    return null;\n  }\n\n  willExpireToken(accessToken);\n  return accessToken;\n}\n\nfunction willExpireToken(token) {\n  const seconds = 60;\n  const metaToken = jwtDecode(token);\n  const {\n    exp\n  } = metaToken;\n  const now = (Date.now() + seconds()) / 1000; //dividido entre mil para pasarlo a unix \n  //console.log(metaToken);\n\n  return now > exp;\n}","map":{"version":3,"sources":["C:/Users/jorge.sanchez/Desktop/proyecto/client/src/api/auth.js"],"names":["basePath","apiVersion","ACCESS_TOKEN","REFRESH_TOKEN","jwtDecode","getAccessToken","accessToken","localStorage","getItem","willExpireToken","token","seconds","metaToken","exp","now","Date"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,UAAnB,QAAqC,UAArC;AACA,SAASC,YAAT,EAAuBC,aAAvB,QAA4C,oBAA5C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAO,SAASC,cAAT,GAA0B;AAC7B,QAAMC,WAAW,GAAGC,YAAY,CAACC,OAAb,CAAqBN,YAArB,CAApB;;AAEA,MAAI,CAACI,WAAD,IAAgBA,WAAW,KAAK,MAApC,EAA4C;AACxC,WAAO,IAAP;AACH;;AAEDG,EAAAA,eAAe,CAACH,WAAD,CAAf;AAEA,SAAOA,WAAP;AACH;;AAED,SAASG,eAAT,CAAyBC,KAAzB,EAAgC;AAC5B,QAAMC,OAAO,GAAG,EAAhB;AACA,QAAMC,SAAS,GAAGR,SAAS,CAACM,KAAD,CAA3B;AACA,QAAM;AAAEG,IAAAA;AAAF,MAAUD,SAAhB;AACA,QAAME,GAAG,GAAG,CAACC,IAAI,CAACD,GAAL,KAAaH,OAAO,EAArB,IAA2B,IAAvC,CAJ4B,CAIgB;AAC5C;;AACA,SAAOG,GAAG,GAAGD,GAAb;AACH","sourcesContent":["import { basePath, apiVersion } from \"./config\";\r\nimport { ACCESS_TOKEN, REFRESH_TOKEN } from \"../utils/constants\";\r\nimport jwtDecode from \"jwt-decode\";\r\n\r\nexport function getAccessToken() {\r\n    const accessToken = localStorage.getItem(ACCESS_TOKEN);\r\n\r\n    if (!accessToken || accessToken === \"null\") {\r\n        return null;\r\n    }\r\n\r\n    willExpireToken(accessToken)\r\n\r\n    return accessToken;\r\n}\r\n\r\nfunction willExpireToken(token) {\r\n    const seconds = 60;\r\n    const metaToken = jwtDecode(token);\r\n    const { exp } = metaToken;\r\n    const now = (Date.now() + seconds()) / 1000 //dividido entre mil para pasarlo a unix \r\n    //console.log(metaToken);\r\n    return now > exp;\r\n}"]},"metadata":{},"sourceType":"module"}