{"ast":null,"code":"import { basePath, apiVersion } from \"./config\";\nimport { ACCESS_TOKEN, REFRESH_TOKEN } from \"../utils/constants\";\nimport jwtDecode from \"jwt-decode\";\nexport function getAccessToken() {\n  const accessToken = localStorage.getItem(ACCESS_TOKEN);\n\n  if (!accessToken || accessToken === \"null\") {\n    return null;\n  }\n\n  return willExpireToken(accessToken) ? null : accessToken;\n}\nexport function getRefreshToken() {\n  const refreshToken = localStorage.getItem(REFRESH_TOKEN);\n\n  if (!refreshToken || refreshToken === null) {\n    return null;\n  } //console.log(refreshToken);\n\n\n  return willExpireToken(refreshToken) ? null : refreshToken;\n}\n\nfunction willExpireToken(token) {\n  const seconds = 60;\n  const metaToken = jwtDecode(token);\n  const {\n    exp\n  } = metaToken;\n  const now = (Date.now() + seconds) / 1000; //dividido entre mil para pasarlo a unix \n  //const expCaducado = exp - 1000000 :simulando el exp caducado\n  //console.log(metaToken);\n\n  return now > exp; //true si el token ha expirado y false si el token no ha expirado\n}","map":{"version":3,"sources":["C:/Users/jorge.sanchez/Desktop/proyecto/client/src/api/auth.js"],"names":["basePath","apiVersion","ACCESS_TOKEN","REFRESH_TOKEN","jwtDecode","getAccessToken","accessToken","localStorage","getItem","willExpireToken","getRefreshToken","refreshToken","token","seconds","metaToken","exp","now","Date"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,UAAnB,QAAqC,UAArC;AACA,SAASC,YAAT,EAAuBC,aAAvB,QAA4C,oBAA5C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAO,SAASC,cAAT,GAA0B;AAC7B,QAAMC,WAAW,GAAGC,YAAY,CAACC,OAAb,CAAqBN,YAArB,CAApB;;AAEA,MAAI,CAACI,WAAD,IAAgBA,WAAW,KAAK,MAApC,EAA4C;AACxC,WAAO,IAAP;AACH;;AAED,SAAOG,eAAe,CAACH,WAAD,CAAf,GAA+B,IAA/B,GAAsCA,WAA7C;AACH;AAED,OAAO,SAASI,eAAT,GAA2B;AAC9B,QAAMC,YAAY,GAAGJ,YAAY,CAACC,OAAb,CAAqBL,aAArB,CAArB;;AAEA,MAAI,CAACQ,YAAD,IAAiBA,YAAY,KAAK,IAAtC,EAA4C;AACxC,WAAO,IAAP;AACH,GAL6B,CAO9B;;;AAEA,SAAOF,eAAe,CAACE,YAAD,CAAf,GAAgC,IAAhC,GAAuCA,YAA9C;AACH;;AAED,SAASF,eAAT,CAAyBG,KAAzB,EAAgC;AAC5B,QAAMC,OAAO,GAAG,EAAhB;AACA,QAAMC,SAAS,GAAGV,SAAS,CAACQ,KAAD,CAA3B;AACA,QAAM;AAAEG,IAAAA;AAAF,MAAUD,SAAhB;AACA,QAAME,GAAG,GAAG,CAACC,IAAI,CAACD,GAAL,KAAaH,OAAd,IAAyB,IAArC,CAJ4B,CAIe;AAC3C;AACA;;AACA,SAAOG,GAAG,GAAGD,GAAb,CAP4B,CAOV;AACrB","sourcesContent":["import { basePath, apiVersion } from \"./config\";\r\nimport { ACCESS_TOKEN, REFRESH_TOKEN } from \"../utils/constants\";\r\nimport jwtDecode from \"jwt-decode\";\r\n\r\nexport function getAccessToken() {\r\n    const accessToken = localStorage.getItem(ACCESS_TOKEN);\r\n\r\n    if (!accessToken || accessToken === \"null\") {\r\n        return null;\r\n    }\r\n\r\n    return willExpireToken(accessToken) ? null : accessToken;\r\n}\r\n\r\nexport function getRefreshToken() {\r\n    const refreshToken = localStorage.getItem(REFRESH_TOKEN);\r\n\r\n    if (!refreshToken || refreshToken === null) {\r\n        return null;\r\n    }\r\n\r\n    //console.log(refreshToken);\r\n\r\n    return willExpireToken(refreshToken) ? null : refreshToken;\r\n}\r\n\r\nfunction willExpireToken(token) {\r\n    const seconds = 60;\r\n    const metaToken = jwtDecode(token);\r\n    const { exp } = metaToken;\r\n    const now = (Date.now() + seconds) / 1000; //dividido entre mil para pasarlo a unix \r\n    //const expCaducado = exp - 1000000 :simulando el exp caducado\r\n    //console.log(metaToken);\r\n    return now > exp; //true si el token ha expirado y false si el token no ha expirado\r\n}"]},"metadata":{},"sourceType":"module"}